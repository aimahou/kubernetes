#1.7部署Kube-dns插件。

Kubernetes DNS 会在集群分配一个DNS Pod和Service，然后配置kubelets的DNS Service’s IP 及resolve DNS names. 推荐安装.
##下载DNS有关的yaml文件
    [root@k8smaster images]# mkdir -p /data/k8s/addons/dns
    [root@k8smaster images]# cd /data/k8s/addons/dns
    [root@k8smaster dns]# 
    [root@k8smaster dns]# for item in Makefile kubedns-controller.yaml.base kubedns-svc.yaml.base transforms2salt.sed transforms2sed.sed; 
    do wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/dns/$item
    done

下载的是以下这些文件

    [root@k8smaster dns]# ll
    总用量 24
    -rw-r--r--. 1 root root 5146 3月   1 15:48 kubedns-controller.yaml.base
    -rw-r--r--. 1 root root 1037 3月   1 15:48 kubedns-svc.yaml.base
    -rw-r--r--. 1 root root 1138 3月   1 15:48 Makefile
    -rw-r--r--. 1 root root  318 3月   1 15:48 transforms2salt.sed
    -rw-r--r--. 1 root root  251 3月   1 15:48 transforms2sed.sed

##设置DNS地址和域名

    [root@k8smaster dns]# cat transforms2sed.sed
    s/__PILLAR__DNS__SERVER__/$DNS_SERVER_IP/g
    s/__PILLAR__DNS__DOMAIN__/$DNS_DOMAIN/g
    /__PILLAR__FEDERATIONS__DOMAIN__MAP__/d
    s/__MACHINE_GENERATED_WARNING__/Warning: This is a file generated from the base underscore template file: __SOURCE_FILENAME__/g
    [root@k8smaster dns]# kubectl get svc --all-namespaces
    NAMESPACE   NAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
    default     kubernetes   172.20.0.1   <none>        443/TCP   52m
    [root@k8smaster dns]# DNS_SERVER_IP=172.20.0.10
    [root@k8smaster dns]# DNS_DOMAIN=cluster.local
    [root@k8smaster dns]# cat <<EOF > transforms2sed.sed
    s/__PILLAR__DNS__SERVER__/$DNS_SERVER_IP/g
    s/__PILLAR__DNS__DOMAIN__/$DNS_DOMAIN/g
    /__PILLAR__FEDERATIONS__DOMAIN__MAP__/d
    s/__MACHINE_GENERATED_WARNING__/Warning: This is a file generated from the base underscore template file: __SOURCE_FILENAME__/g
    EOF
    [root@k8smaster dns]# cat transforms2sed.sed
    s/__PILLAR__DNS__SERVER__/172.20.40.1/g
    s/__PILLAR__DNS__DOMAIN__/test.com/g
    /__PILLAR__FEDERATIONS__DOMAIN__MAP__/d
    s/__MACHINE_GENERATED_WARNING__/Warning: This is a file generated from the base underscore template file: __SOURCE_FILENAME__/g
    [root@k8smaster dns]# 

    [root@k8smaster dns]# ll
    总用量 24
    -rw-r--r--. 1 root root 5146 3月   1 15:48 kubedns-controller.yaml.base
    -rw-r--r--. 1 root root 1037 3月   1 15:48 kubedns-svc.yaml.base
    -rw-r--r--. 1 root root 1138 3月   1 15:48 Makefile
    -rw-r--r--. 1 root root  318 3月   1 15:48 transforms2salt.sed
    -rw-r--r--. 1 root root  245 3月   1 15:50 transforms2sed.sed

##编译生成in和sed文件

    [root@k8smaster dns]# make
    sed -f transforms2salt.sed kubedns-controller.yaml.base | sed s/__SOURCE_FILENAME__/kubedns-controller.yaml.base/g > kubedns-controller.yaml.in
    sed -f transforms2salt.sed kubedns-svc.yaml.base | sed s/__SOURCE_FILENAME__/kubedns-svc.yaml.base/g > kubedns-svc.yaml.in
    sed -f transforms2sed.sed kubedns-controller.yaml.base  | sed s/__SOURCE_FILENAME__/kubedns-controller.yaml.base/g > kubedns-controller.yaml.sed
    sed -f transforms2sed.sed kubedns-svc.yaml.base  | sed s/__SOURCE_FILENAME__/kubedns-svc.yaml.base/g > kubedns-svc.yaml.sed
    [root@k8smaster dns]# ll
    总用量 48
    -rw-r--r--. 1 root root 5146 3月   1 15:48 kubedns-controller.yaml.base
    -rw-r--r--. 1 root root 5233 3月   1 15:54 kubedns-controller.yaml.in
    -rw-r--r--. 1 root root 5114 3月   1 15:54 kubedns-controller.yaml.sed
    -rw-r--r--. 1 root root 1037 3月   1 15:48 kubedns-svc.yaml.base
    -rw-r--r--. 1 root root 1106 3月   1 15:54 kubedns-svc.yaml.in
    -rw-r--r--. 1 root root 1091 3月   1 15:54 kubedns-svc.yaml.sed
    -rw-r--r--. 1 root root 1138 3月   1 15:48 Makefile
    -rw-r--r--. 1 root root  318 3月   1 15:48 transforms2salt.sed
    -rw-r--r--. 1 root root  245 3月   1 15:50 transforms2sed.sed
    [root@k8smaster dns]# 
##修改RC和SVC文件1
修改kubedns-controller.yaml.sed
下面编辑kubedns-controller.yaml.sed文件，删除volume的配置，一般在image字段前面如下：

    #      volumes:
    #      - name: kube-dns-config
    #        configMap:
    #          name: kube-dns
    #          optional: true
    
    
    #        volumeMounts:
    #        - name: kube-dns-config
    #          mountPath: /kube-dns-config
    

以避免两个问题：
1.错误: error validating "kubedns-controller.yaml.sed.bak": error validating data: found invalid field optional for v1.ConfigMapVolumeSource; if you choose to ignore these errors, turn validation off with --validate=false
2.创建容器后, tail /var/log/messages, 显示错误: configmaps "kube-dns" not found 

    [root@k8smaster dns]# cat kubedns-controller.yaml.sed
    # Copyright 2016 The Kubernetes Authors.
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    
    # Should keep target in cluster/addons/dns-horizontal-autoscaler/dns-horizontal-autoscaler.yaml
    # in sync with this file.
    
    # Warning: This is a file generated from the base underscore template file: kubedns-controller.yaml.base
    
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      name: kube-dns
      namespace: kube-system
      labels:
        k8s-app: kube-dns
        kubernetes.io/cluster-service: "true"
        addonmanager.kubernetes.io/mode: Reconcile
    spec:
      # replicas: not specified here:
      # 1. In order to make Addon Manager do not reconcile this replicas parameter.
      # 2. Default is 1.
      # 3. Will be tuned in real time if DNS horizontal auto-scaling is turned on.
      strategy:
        rollingUpdate:
          maxSurge: 10%
          maxUnavailable: 0
      selector:
        matchLabels:
          k8s-app: kube-dns
      template:
        metadata:
          labels:
            k8s-app: kube-dns
          annotations:
            scheduler.alpha.kubernetes.io/critical-pod: ''
            scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
        spec:
    #      volumes:
    #      - name: kube-dns-config
    #        configMap:
    #          name: kube-dns
    #          optional: true
          containers:
          - name: kubedns
            image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.13.0
            resources:
              # TODO: Set memory limits when we've profiled the container for large
              # clusters, then set request = limit to keep this container in
              # guaranteed class. Currently, this container falls into the
              # "burstable" category so the kubelet doesn't backoff from restarting it.
              limits:
                memory: 170Mi
              requests:
                cpu: 100m
                memory: 70Mi
            livenessProbe:
              httpGet:
                path: /healthcheck/kubedns
                port: 10054
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              successThreshold: 1
              failureThreshold: 5
            readinessProbe:
              httpGet:
                path: /readiness
                port: 8081
                scheme: HTTP
              # we poll on pod startup for the Kubernetes master service and
              # only setup the /readiness HTTP server once that's available.
              initialDelaySeconds: 3
              timeoutSeconds: 5
            args:
            - --domain=test.com.
            - --dns-port=10053
            - --config-dir=/kube-dns-config
            - --v=2
            env:
            - name: PROMETHEUS_PORT
              value: "10055"
            ports:
            - containerPort: 10053
              name: dns-local
              protocol: UDP
            - containerPort: 10053
              name: dns-tcp-local
              protocol: TCP
            - containerPort: 10055
              name: metrics
              protocol: TCP
    #        volumeMounts:
    #        - name: kube-dns-config
    #          mountPath: /kube-dns-config
          - name: dnsmasq
            image: gcr.io/google_containers/k8s-dns-dnsmasq-amd64:1.13.0
            livenessProbe:
              httpGet:
                path: /healthcheck/dnsmasq
                port: 10054
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              successThreshold: 1
              failureThreshold: 5
            args:
            - --cache-size=1000
            - --server=/test.com/127.0.0.1#10053
            - --server=/in-addr.arpa/127.0.0.1#10053
            - --server=/ip6.arpa/127.0.0.1#10053
            - --log-facility=-
            ports:
            - containerPort: 53
              name: dns
              protocol: UDP
            - containerPort: 53
              name: dns-tcp
              protocol: TCP
            # see: https://github.com/kubernetes/kubernetes/issues/29055 for details
            resources:
              requests:
                cpu: 150m
                memory: 10Mi
          - name: sidecar
            image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.13.0
            livenessProbe:
              httpGet:
                path: /metrics
                port: 10054
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              successThreshold: 1
              failureThreshold: 5
            args:
            - --v=2
            - --logtostderr
            - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.test.com,5,A
            - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.test.com,5,A
            ports:
            - containerPort: 10054
              name: metrics
              protocol: TCP
            resources:
              requests:
                memory: 20Mi
                cpu: 10m
          dnsPolicy: Default  # Don't use cluster DNS.
          serviceAccountName: kube-dns
    [root@k8smaster dns]# 
##SVC文件不用修改
    
    [root@k8smaster dns]#  cat kubedns-svc.yaml.sed
    # Copyright 2016 The Kubernetes Authors.
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    
    # Warning: This is a file generated from the base underscore template file: kubedns-svc.yaml.base
    
    apiVersion: v1
    kind: Service
    metadata:
      name: kube-dns
      namespace: kube-system
      labels:
        k8s-app: kube-dns
        kubernetes.io/cluster-service: "true"
        addonmanager.kubernetes.io/mode: Reconcile
        kubernetes.io/name: "KubeDNS"
    spec:
      selector:
        k8s-app: kube-dns
      clusterIP: 172.20.40.1
      ports:
      - name: dns
        port: 53
        protocol: UDP
      - name: dns-tcp
        port: 53
        protocol: TCP
    [root@k8smaster dns]# 

##修改controller-manager配置项

    [root@k8smaster dns]# vi /etc/kubernetes/controller-manager
    
    ###
    # The following values are used to configure the kubernetes controller-manager
    
    # defaults from config and apiserver should be adequate
    
    # Add your own!
    #KUBE_CONTROLLER_MANAGER_ARGS=""
    KUBE_CONTROLLER_MANAGER_ARGS="--service-account-private-key-file=/var/run/kubernetes/apiserver.key --root-ca-file=/var/run/kubernetes/apiserver.crt"

若忘记修改可能会报错：No API token found for service account "default"

    [root@k8smaster dns]# systemctl restart kube-controller-manager && systemctl status -l kube-controller-manager
    ● kube-controller-manager.service - Kubernetes Controller Manager
       Loaded: loaded (/usr/lib/systemd/system/kube-controller-manager.service; disabled; vendor preset: disabled)
       Active: active (running) since 三 2017-03-01 16:03:01 CST; 5ms ago
         Docs: https://github.com/GoogleCloudPlatform/kubernetes
     Main PID: 14813 (kube-controller)
       Memory: 768.0K
       CGroup: /system.slice/kube-controller-manager.service
               └─14813 /usr/bin/kube-controller-manager --logtostderr=true --v=0 --master=http://172.16.160.205:8080 --service-account-private-key-file=/var/run/kubernetes/apiserver.key --root-ca-file=/var/run/kubernetes/apiserver.crt
    
    3月 01 16:03:01 k8smaster systemd[1]: Started Kubernetes Controller Manager.
    3月 01 16:03:01 k8smaster systemd[1]: Starting Kubernetes Controller Manager...
##下载所需镜像
创建RC和SVC需要用到以下镜像

    [root@k8smaster dns]# docker pull gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.13.0
    [root@k8smaster dns]# docker pull gcr.io/google_containers/k8s-dns-dnsmasq-amd64:1.13.0
    [root@k8smaster dns]# docker pull gcr.io/google_containers/k8s-dns-sidecar-amd64:1.13.0

##创建RC和SVC

    [root@k8smaster dns]# 
    [root@k8smaster dns]# kubectl create -f kubedns-controller.yaml.sed
    deployment "kube-dns" created
    [root@k8smaster dns]# kubectl create -f kubedns-svc.yaml.sed
    service "kube-dns" created
    [root@k8smaster dns]# kubectl get deploy --all-namespaces
    NAMESPACE     NAME       DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
    kube-system   kube-dns   1         1         1            0           4m
    [root@k8smaster dns]# 
    [root@k8smaster dns]# kubectl get pods -o wide --all-namespaces
    NAMESPACE     NAME                        READY     STATUS             RESTARTS   AGE       IP          NODE
    kube-system   kube-dns-3676970589-nfs8k   2/3       CrashLoopBackOff   2          34s       10.1.87.2   k8snode2
    [root@k8smaster dns]# kubectl get svc -o wide --all-namespaces
    NAMESPACE     NAME         CLUSTER-IP    EXTERNAL-IP   PORT(S)         AGE       SELECTOR
    default       kubernetes   172.20.0.1    <none>        443/TCP         1h        <none>
    kube-system   kube-dns     172.20.40.1   <none>        53/UDP,53/TCP   40s       k8s-app=kube-dns
    [root@k8smaster dns]# kubectl get rc -o wide --all-namespaces
    No resources found.
    [root@k8smaster dns]# 
    [root@k8smaster dns]# kubectl cluster-info
    Kubernetes master is running at http://localhost:8080
    KubeDNS is running at http://localhost:8080/api/v1/proxy/namespaces/kube-system/services/kube-dns
    
    To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
    [root@k8smaster dns]# 

##kubelet里添加DNS和域名

    [root@k8snode1 home]# cat /etc/kubernetes/kubelet
    #KUBELET_ADDRESS="--address=127.0.0.1"
    KUBELET_ADDRESS="--address=0.0.0.0"
    # KUBELET_PORT="--port=10250"
    #KUBELET_HOSTNAME="--hostname-override=127.0.0.1"
    KUBELET_HOSTNAME="--hostname-override=k8snode1" 
    #KUBELET_API_SERVER="--api-servers=http://127.0.0.1:8080"
    KUBELET_API_SERVER="--api-servers=http://172.16.160.205:8080"
    
    KUBELET_CLUSTER_DNS="--cluster_dns=172.20.40.1"
    KUBELET_CLUSTER_DOMAIN="--cluster_domain=test.com"
    
    
    KUBELET_POD_INFRA_CONTAINER="--pod-infra-container-image=registry.access.redhat.com/rhel7/pod-infrastructure:latest"
    KUBELET_ARGS=""
    [root@k8snode1 home]# systemctl restart kubelet && systemctl status kubelet
    
##反部署DNS
    [root@k8smaster dns]# kubectl delete -f kubedns-controller.yaml.sed
        
    [root@k8smaster dns]# kubectl delete -f kubedns-svc.yaml.sed

##跑nginx测试DNS

    [root@k8smaster dns]# kubectl run nginx-first --image=172.16.160.29:5000/nginx --replicas=2 --port=80
    [root@k8smaster dns]# kubectl run nginx-first --image=greatbsky/nginx --replicas=2 --port=80
    deployment "nginx-first" created
    [root@k8smaster dns]# kubectl get pods -o wide
    NAME                           READY     STATUS    RESTARTS   AGE       IP          NODE
    nginx-first-3305292395-gtc42   1/1       Running   0          1m        10.1.87.3   k8snode2
    nginx-first-3305292395-kdd61   1/1       Running   0          1m        10.1.44.2   k8snode1
    [root@k8smaster dns]# kubectl get deploy
    NAME          DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
    nginx-first   2         2         2            2           1m
    [root@k8smaster dns]#  kubectl expose deployment nginx-first --target-port=80
    service "nginx-first" exposed
    [root@k8smaster dns]# kubectl get services
    NAME          CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE
    kubernetes    172.20.0.1      <none>        443/TCP   18h
    nginx-first   172.20.26.233   <none>        80/TCP    15s
    [root@k8snode1 images]# docker ps 
    CONTAINER ID        IMAGE                                      COMMAND                  CREATED             STATUS              PORTS               NAMES
    38077037a85a        greatbsky/nginx                            "nginx -g 'daemon ..."   5 minutes ago       Up 5 minutes                            k8s_nginx-first.863303b8_nginx-first-3305292395-kdd61_default_1e3e6d95-feeb-11e6-a142-005056b1ced4_205a2d2f
    8414fe8acf7d        gcr.io/google_containers/pause-amd64:3.0   "/pause"                 5 minutes ago       Up 5 minutes                            k8s_POD.b2390301_nginx-first-3305292395-kdd61_default_1e3e6d95-feeb-11e6-a142-005056b1ced4_b4aadaa1
    [root@k8snode1 images]# 
    [root@k8snode1 images]# docker exec -it 38077037a85a /bin/bash
    [root@nginx-first-3305292395-kdd61 /]# yum install bind-utils -y


